{"id":"node_modules/ramda/es/tail.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602194130739},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602189572866},{"name":"./internal/_checkForMethod.js","loc":{"line":1,"column":28},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/tail.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_checkForMethod.js"},{"name":"./internal/_curry1.js","loc":{"line":2,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/tail.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_curry1.js"},{"name":"./slice.js","loc":{"line":3,"column":18},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/tail.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/slice.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _checkForMethod2 = _interopRequireDefault(require(\"./internal/_checkForMethod.js\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\n\nvar _slice = _interopRequireDefault(require(\"./slice.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nvar tail = /*#__PURE__*/(0, _curry.default)( /*#__PURE__*/(0, _checkForMethod2.default)('tail', /*#__PURE__*/(0, _slice.default)(1, Infinity)));\nvar _default = tail;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/tail.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/tail.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/tail.js","original":{"line":3,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/tail.js","original":{"line":4,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/ramda/es/tail.js","original":{"line":32,"column":0}},{"name":"tail","generated":{"line":43,"column":4},"source":"node_modules/ramda/es/tail.js","original":{"line":32,"column":4}},{"generated":{"line":43,"column":8},"source":"node_modules/ramda/es/tail.js","original":{"line":32,"column":8}},{"generated":{"line":43,"column":11},"source":"node_modules/ramda/es/tail.js","original":{"line":33,"column":0}},{"generated":{"line":43,"column":24},"source":"node_modules/ramda/es/tail.js","original":{"line":34,"column":0}},{"generated":{"line":43,"column":45},"source":"node_modules/ramda/es/tail.js","original":{"line":35,"column":0}},{"generated":{"line":43,"column":58},"source":"node_modules/ramda/es/tail.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":88},"source":"node_modules/ramda/es/tail.js","original":{"line":36,"column":16}},{"generated":{"line":43,"column":94},"source":"node_modules/ramda/es/tail.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":96},"source":"node_modules/ramda/es/tail.js","original":{"line":37,"column":0}},{"generated":{"line":43,"column":109},"source":"node_modules/ramda/es/tail.js","original":{"line":38,"column":0}},{"generated":{"line":43,"column":129},"source":"node_modules/ramda/es/tail.js","original":{"line":38,"column":6}},{"generated":{"line":43,"column":130},"source":"node_modules/ramda/es/tail.js","original":{"line":38,"column":0}},{"name":"Infinity","generated":{"line":43,"column":132},"source":"node_modules/ramda/es/tail.js","original":{"line":38,"column":9}},{"generated":{"line":43,"column":140},"source":"node_modules/ramda/es/tail.js","original":{"line":38,"column":0}},{"generated":{"line":43,"column":141},"source":"node_modules/ramda/es/tail.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":142},"source":"node_modules/ramda/es/tail.js","original":{"line":34,"column":0}},{"generated":{"line":43,"column":143},"source":"node_modules/ramda/es/tail.js","original":{"line":32,"column":0}},{"name":"tail","generated":{"line":44,"column":15},"source":"node_modules/ramda/es/tail.js","original":{"line":40,"column":15}}],"sources":{"node_modules/ramda/es/tail.js":"import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport slice from \"./slice.js\";\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\n\nvar tail =\n/*#__PURE__*/\n_curry1(\n/*#__PURE__*/\n_checkForMethod('tail',\n/*#__PURE__*/\nslice(1, Infinity)));\n\nexport default tail;"},"lineCount":null}},"error":null,"hash":"f4fd850b552a8b9f39e81a60ae8f74b7","cacheData":{"env":{}}}