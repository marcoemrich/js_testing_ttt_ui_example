{"id":"node_modules/ramda/es/partialRight.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602185185963},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602184504771},{"name":"./internal/_concat.js","loc":{"line":1,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/partialRight.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_concat.js"},{"name":"./internal/_createPartialApplicator.js","loc":{"line":2,"column":37},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/partialRight.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_createPartialApplicator.js"},{"name":"./flip.js","loc":{"line":3,"column":17},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/partialRight.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/flip.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _concat2 = _interopRequireDefault(require(\"./internal/_concat.js\"));\n\nvar _createPartialApplicator2 = _interopRequireDefault(require(\"./internal/_createPartialApplicator.js\"));\n\nvar _flip = _interopRequireDefault(require(\"./flip.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\nvar partialRight = /*#__PURE__*/(0, _createPartialApplicator2.default)( /*#__PURE__*/(0, _flip.default)(_concat2.default));\nvar _default = partialRight;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/partialRight.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/partialRight.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/partialRight.js","original":{"line":3,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/partialRight.js","original":{"line":4,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/ramda/es/partialRight.js","original":{"line":29,"column":0}},{"name":"partialRight","generated":{"line":40,"column":4},"source":"node_modules/ramda/es/partialRight.js","original":{"line":29,"column":4}},{"generated":{"line":40,"column":16},"source":"node_modules/ramda/es/partialRight.js","original":{"line":29,"column":16}},{"generated":{"line":40,"column":19},"source":"node_modules/ramda/es/partialRight.js","original":{"line":30,"column":0}},{"generated":{"line":40,"column":32},"source":"node_modules/ramda/es/partialRight.js","original":{"line":31,"column":0}},{"generated":{"line":40,"column":72},"source":"node_modules/ramda/es/partialRight.js","original":{"line":32,"column":0}},{"generated":{"line":40,"column":85},"source":"node_modules/ramda/es/partialRight.js","original":{"line":33,"column":0}},{"name":"_concat","generated":{"line":40,"column":104},"source":"node_modules/ramda/es/partialRight.js","original":{"line":33,"column":5}},{"generated":{"line":40,"column":120},"source":"node_modules/ramda/es/partialRight.js","original":{"line":33,"column":0}},{"generated":{"line":40,"column":121},"source":"node_modules/ramda/es/partialRight.js","original":{"line":31,"column":0}},{"generated":{"line":40,"column":122},"source":"node_modules/ramda/es/partialRight.js","original":{"line":29,"column":0}},{"name":"partialRight","generated":{"line":41,"column":15},"source":"node_modules/ramda/es/partialRight.js","original":{"line":35,"column":15}}],"sources":{"node_modules/ramda/es/partialRight.js":"import _concat from \"./internal/_concat.js\";\nimport _createPartialApplicator from \"./internal/_createPartialApplicator.js\";\nimport flip from \"./flip.js\";\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\n\nvar partialRight =\n/*#__PURE__*/\n_createPartialApplicator(\n/*#__PURE__*/\nflip(_concat));\n\nexport default partialRight;"},"lineCount":null}},"error":null,"hash":"2ca371299a3e41279bdb03e4430c61aa","cacheData":{"env":{}}}