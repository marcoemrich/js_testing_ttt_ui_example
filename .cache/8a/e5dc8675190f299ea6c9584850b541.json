{"id":"node_modules/ramda/es/uniq.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602185185963},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602184504771},{"name":"./identity.js","loc":{"line":1,"column":21},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/uniq.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/identity.js"},{"name":"./uniqBy.js","loc":{"line":2,"column":19},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/uniq.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/uniqBy.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\n\nvar _uniqBy = _interopRequireDefault(require(\"./uniqBy.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\nvar uniq = /*#__PURE__*/(0, _uniqBy.default)(_identity.default);\nvar _default = uniq;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/uniq.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/uniq.js","original":{"line":2,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/uniq.js","original":{"line":3,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/uniq.js","original":{"line":21,"column":0}},{"name":"uniq","generated":{"line":31,"column":4},"source":"node_modules/ramda/es/uniq.js","original":{"line":21,"column":4}},{"generated":{"line":31,"column":8},"source":"node_modules/ramda/es/uniq.js","original":{"line":21,"column":8}},{"generated":{"line":31,"column":11},"source":"node_modules/ramda/es/uniq.js","original":{"line":22,"column":0}},{"generated":{"line":31,"column":24},"source":"node_modules/ramda/es/uniq.js","original":{"line":23,"column":0}},{"name":"identity","generated":{"line":31,"column":45},"source":"node_modules/ramda/es/uniq.js","original":{"line":23,"column":7}},{"generated":{"line":31,"column":62},"source":"node_modules/ramda/es/uniq.js","original":{"line":23,"column":0}},{"generated":{"line":31,"column":63},"source":"node_modules/ramda/es/uniq.js","original":{"line":21,"column":0}},{"name":"uniq","generated":{"line":32,"column":15},"source":"node_modules/ramda/es/uniq.js","original":{"line":24,"column":15}}],"sources":{"node_modules/ramda/es/uniq.js":"import identity from \"./identity.js\";\nimport uniqBy from \"./uniqBy.js\";\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\n\nvar uniq =\n/*#__PURE__*/\nuniqBy(identity);\nexport default uniq;"},"lineCount":null}},"error":null,"hash":"909ac66480676cc6fc76cc7dc0322d76","cacheData":{"env":{}}}