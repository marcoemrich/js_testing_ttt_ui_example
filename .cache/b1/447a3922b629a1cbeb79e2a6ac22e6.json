{"id":"node_modules/ramda/es/reduceRight.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602185185963},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602184504771},{"name":"./internal/_curry3.js","loc":{"line":1,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/reduceRight.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_curry3.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry3.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nvar reduceRight = /*#__PURE__*/(0, _curry.default)(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n\n  return acc;\n});\nvar _default = reduceRight;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":2,"column":0}},{"generated":{"line":54,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":45,"column":0}},{"name":"reduceRight","generated":{"line":54,"column":4},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":45,"column":4}},{"generated":{"line":54,"column":15},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":45,"column":15}},{"generated":{"line":54,"column":18},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":46,"column":0}},{"generated":{"line":54,"column":31},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":0}},{"generated":{"line":54,"column":51},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":8}},{"name":"reduceRight","generated":{"line":54,"column":60},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":17}},{"generated":{"line":54,"column":71},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":8}},{"name":"fn","generated":{"line":54,"column":72},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":29}},{"generated":{"line":54,"column":74},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":8}},{"name":"acc","generated":{"line":54,"column":76},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":33}},{"generated":{"line":54,"column":79},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":8}},{"name":"list","generated":{"line":54,"column":81},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":38}},{"generated":{"line":54,"column":85},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":8}},{"generated":{"line":54,"column":87},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":44}},{"generated":{"line":55,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":48,"column":2}},{"name":"idx","generated":{"line":55,"column":6},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":48,"column":6}},{"generated":{"line":55,"column":9},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":48,"column":9}},{"name":"list","generated":{"line":55,"column":12},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":48,"column":12}},{"generated":{"line":55,"column":16},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":48,"column":16}},{"name":"length","generated":{"line":55,"column":17},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":48,"column":17}},{"generated":{"line":55,"column":23},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":48,"column":12}},{"generated":{"line":55,"column":26},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":48,"column":26}},{"generated":{"line":55,"column":27},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":48,"column":2}},{"generated":{"line":57,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":50,"column":2}},{"name":"idx","generated":{"line":57,"column":9},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":50,"column":9}},{"generated":{"line":57,"column":12},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":50,"column":12}},{"generated":{"line":57,"column":16},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":50,"column":16}},{"generated":{"line":57,"column":17},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":50,"column":2}},{"generated":{"line":57,"column":19},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":50,"column":19}},{"name":"acc","generated":{"line":58,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":4}},{"name":"acc","generated":{"line":58,"column":4},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":4}},{"generated":{"line":58,"column":7},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":7}},{"name":"fn","generated":{"line":58,"column":10},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":10}},{"generated":{"line":58,"column":12},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":12}},{"name":"list","generated":{"line":58,"column":13},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":13}},{"generated":{"line":58,"column":17},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":17}},{"name":"idx","generated":{"line":58,"column":18},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":18}},{"generated":{"line":58,"column":21},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":17}},{"generated":{"line":58,"column":22},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":12}},{"name":"acc","generated":{"line":58,"column":24},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":24}},{"generated":{"line":58,"column":27},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":12}},{"generated":{"line":58,"column":28},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":51,"column":4}},{"name":"idx","generated":{"line":59,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":52,"column":4}},{"name":"idx","generated":{"line":59,"column":4},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":52,"column":4}},{"generated":{"line":59,"column":7},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":52,"column":7}},{"generated":{"line":59,"column":11},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":52,"column":11}},{"generated":{"line":59,"column":12},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":52,"column":4}},{"generated":{"line":60,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":53,"column":3}},{"generated":{"line":62,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":55,"column":2}},{"name":"acc","generated":{"line":62,"column":9},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":55,"column":9}},{"generated":{"line":62,"column":12},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":55,"column":2}},{"generated":{"line":63,"column":0},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":56,"column":1}},{"generated":{"line":63,"column":1},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":47,"column":0}},{"generated":{"line":63,"column":2},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":45,"column":0}},{"name":"reduceRight","generated":{"line":64,"column":15},"source":"node_modules/ramda/es/reduceRight.js","original":{"line":58,"column":15}}],"sources":{"node_modules/ramda/es/reduceRight.js":"import _curry3 from \"./internal/_curry3.js\";\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\n\nvar reduceRight =\n/*#__PURE__*/\n_curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    idx -= 1;\n  }\n\n  return acc;\n});\n\nexport default reduceRight;"},"lineCount":null}},"error":null,"hash":"8114014e6ac5c4e34fb62b445c104b39","cacheData":{"env":{}}}