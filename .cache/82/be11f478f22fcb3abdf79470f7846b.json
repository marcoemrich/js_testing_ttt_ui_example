{"id":"node_modules/ramda/es/construct.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602194130739},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602189572866},{"name":"./internal/_curry1.js","loc":{"line":1,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/construct.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_curry1.js"},{"name":"./constructN.js","loc":{"line":2,"column":23},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/construct.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/constructN.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry1.js\"));\n\nvar _constructN = _interopRequireDefault(require(\"./constructN.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      const AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      const animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      const animalSighting = R.invoker(0, 'sighting');\n *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\nvar construct = /*#__PURE__*/(0, _curry.default)(function construct(Fn) {\n  return (0, _constructN.default)(Fn.length, Fn);\n});\nvar _default = construct;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/construct.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/construct.js","original":{"line":2,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/construct.js","original":{"line":3,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/ramda/es/construct.js","original":{"line":36,"column":0}},{"name":"construct","generated":{"line":46,"column":4},"source":"node_modules/ramda/es/construct.js","original":{"line":36,"column":4}},{"generated":{"line":46,"column":13},"source":"node_modules/ramda/es/construct.js","original":{"line":36,"column":13}},{"generated":{"line":46,"column":16},"source":"node_modules/ramda/es/construct.js","original":{"line":37,"column":0}},{"generated":{"line":46,"column":29},"source":"node_modules/ramda/es/construct.js","original":{"line":38,"column":0}},{"generated":{"line":46,"column":49},"source":"node_modules/ramda/es/construct.js","original":{"line":38,"column":8}},{"name":"construct","generated":{"line":46,"column":58},"source":"node_modules/ramda/es/construct.js","original":{"line":38,"column":17}},{"generated":{"line":46,"column":67},"source":"node_modules/ramda/es/construct.js","original":{"line":38,"column":8}},{"name":"Fn","generated":{"line":46,"column":68},"source":"node_modules/ramda/es/construct.js","original":{"line":38,"column":27}},{"generated":{"line":46,"column":70},"source":"node_modules/ramda/es/construct.js","original":{"line":38,"column":8}},{"generated":{"line":46,"column":72},"source":"node_modules/ramda/es/construct.js","original":{"line":38,"column":31}},{"generated":{"line":47,"column":0},"source":"node_modules/ramda/es/construct.js","original":{"line":39,"column":2}},{"generated":{"line":47,"column":9},"source":"node_modules/ramda/es/construct.js","original":{"line":39,"column":9}},{"name":"Fn","generated":{"line":47,"column":34},"source":"node_modules/ramda/es/construct.js","original":{"line":39,"column":20}},{"generated":{"line":47,"column":36},"source":"node_modules/ramda/es/construct.js","original":{"line":39,"column":22}},{"name":"length","generated":{"line":47,"column":37},"source":"node_modules/ramda/es/construct.js","original":{"line":39,"column":23}},{"generated":{"line":47,"column":43},"source":"node_modules/ramda/es/construct.js","original":{"line":39,"column":9}},{"name":"Fn","generated":{"line":47,"column":45},"source":"node_modules/ramda/es/construct.js","original":{"line":39,"column":31}},{"generated":{"line":47,"column":47},"source":"node_modules/ramda/es/construct.js","original":{"line":39,"column":9}},{"generated":{"line":47,"column":48},"source":"node_modules/ramda/es/construct.js","original":{"line":39,"column":2}},{"generated":{"line":48,"column":0},"source":"node_modules/ramda/es/construct.js","original":{"line":40,"column":1}},{"generated":{"line":48,"column":1},"source":"node_modules/ramda/es/construct.js","original":{"line":38,"column":0}},{"generated":{"line":48,"column":2},"source":"node_modules/ramda/es/construct.js","original":{"line":36,"column":0}},{"name":"construct","generated":{"line":49,"column":15},"source":"node_modules/ramda/es/construct.js","original":{"line":42,"column":15}}],"sources":{"node_modules/ramda/es/construct.js":"import _curry1 from \"./internal/_curry1.js\";\nimport constructN from \"./constructN.js\";\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      const AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      const animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      const animalSighting = R.invoker(0, 'sighting');\n *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\n\nvar construct =\n/*#__PURE__*/\n_curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\n\nexport default construct;"},"lineCount":null}},"error":null,"hash":"061d5b397597f45732666c356b665da7","cacheData":{"env":{}}}