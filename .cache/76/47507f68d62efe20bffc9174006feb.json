{"id":"node_modules/ramda/es/otherwise.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602194130739},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602189572866},{"name":"./internal/_curry2.js","loc":{"line":1,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/otherwise.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_curry2.js"},{"name":"./internal/_assertPromise.js","loc":{"line":2,"column":27},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/otherwise.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_assertPromise.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _assertPromise2 = _interopRequireDefault(require(\"./internal/_assertPromise.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns the result of applying the onFailure function to the value inside\n * a failed promise. This is useful for handling rejected promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig (e -> b) -> (Promise e a) -> (Promise e b)\n * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)\n * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(null, onFailure)`\n * @see R.then\n * @example\n *\n *      var failedFetch = (id) => Promise.reject('bad ID');\n *      var useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' })\n *\n *      //recoverFromFailure :: String -> Promise ({firstName, lastName})\n *      var recoverFromFailure = R.pipe(\n *        failedFetch,\n *        R.otherwise(useDefault),\n *        R.then(R.pick(['firstName', 'lastName'])),\n *      );\n *      recoverFromFailure(12345).then(console.log)\n */\nvar otherwise = /*#__PURE__*/(0, _curry.default)(function otherwise(f, p) {\n  (0, _assertPromise2.default)('otherwise', p);\n  return p.then(null, f);\n});\nvar _default = otherwise;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/otherwise.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/otherwise.js","original":{"line":2,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/otherwise.js","original":{"line":3,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/ramda/es/otherwise.js","original":{"line":32,"column":0}},{"name":"otherwise","generated":{"line":42,"column":4},"source":"node_modules/ramda/es/otherwise.js","original":{"line":32,"column":4}},{"generated":{"line":42,"column":13},"source":"node_modules/ramda/es/otherwise.js","original":{"line":32,"column":13}},{"generated":{"line":42,"column":16},"source":"node_modules/ramda/es/otherwise.js","original":{"line":33,"column":0}},{"generated":{"line":42,"column":29},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":0}},{"generated":{"line":42,"column":49},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":8}},{"name":"otherwise","generated":{"line":42,"column":58},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":17}},{"generated":{"line":42,"column":67},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":8}},{"name":"f","generated":{"line":42,"column":68},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":27}},{"generated":{"line":42,"column":69},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":8}},{"name":"p","generated":{"line":42,"column":71},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":30}},{"generated":{"line":42,"column":72},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":8}},{"generated":{"line":42,"column":74},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":33}},{"generated":{"line":43,"column":0},"source":"node_modules/ramda/es/otherwise.js","original":{"line":35,"column":2}},{"generated":{"line":43,"column":31},"source":"node_modules/ramda/es/otherwise.js","original":{"line":35,"column":17}},{"generated":{"line":43,"column":42},"source":"node_modules/ramda/es/otherwise.js","original":{"line":35,"column":2}},{"name":"p","generated":{"line":43,"column":44},"source":"node_modules/ramda/es/otherwise.js","original":{"line":35,"column":30}},{"generated":{"line":43,"column":45},"source":"node_modules/ramda/es/otherwise.js","original":{"line":35,"column":2}},{"generated":{"line":44,"column":0},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":2}},{"name":"p","generated":{"line":44,"column":9},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":9}},{"generated":{"line":44,"column":10},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":10}},{"name":"then","generated":{"line":44,"column":11},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":11}},{"generated":{"line":44,"column":15},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":9}},{"generated":{"line":44,"column":16},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":16}},{"generated":{"line":44,"column":20},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":9}},{"name":"f","generated":{"line":44,"column":22},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":22}},{"generated":{"line":44,"column":23},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":9}},{"generated":{"line":44,"column":24},"source":"node_modules/ramda/es/otherwise.js","original":{"line":37,"column":2}},{"generated":{"line":45,"column":0},"source":"node_modules/ramda/es/otherwise.js","original":{"line":38,"column":1}},{"generated":{"line":45,"column":1},"source":"node_modules/ramda/es/otherwise.js","original":{"line":34,"column":0}},{"generated":{"line":45,"column":2},"source":"node_modules/ramda/es/otherwise.js","original":{"line":32,"column":0}},{"name":"otherwise","generated":{"line":46,"column":15},"source":"node_modules/ramda/es/otherwise.js","original":{"line":40,"column":15}}],"sources":{"node_modules/ramda/es/otherwise.js":"import _curry2 from \"./internal/_curry2.js\";\nimport _assertPromise from \"./internal/_assertPromise.js\";\n/**\n * Returns the result of applying the onFailure function to the value inside\n * a failed promise. This is useful for handling rejected promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig (e -> b) -> (Promise e a) -> (Promise e b)\n * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)\n * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(null, onFailure)`\n * @see R.then\n * @example\n *\n *      var failedFetch = (id) => Promise.reject('bad ID');\n *      var useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' })\n *\n *      //recoverFromFailure :: String -> Promise ({firstName, lastName})\n *      var recoverFromFailure = R.pipe(\n *        failedFetch,\n *        R.otherwise(useDefault),\n *        R.then(R.pick(['firstName', 'lastName'])),\n *      );\n *      recoverFromFailure(12345).then(console.log)\n */\n\nvar otherwise =\n/*#__PURE__*/\n_curry2(function otherwise(f, p) {\n  _assertPromise('otherwise', p);\n\n  return p.then(null, f);\n});\n\nexport default otherwise;"},"lineCount":null}},"error":null,"hash":"3fcdcb412ffc977fc59a1f54b705012c","cacheData":{"env":{}}}