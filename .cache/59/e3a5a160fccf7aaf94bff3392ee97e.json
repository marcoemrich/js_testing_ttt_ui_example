{"id":"node_modules/ramda/es/transduce.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602194130739},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602189572866},{"name":"./internal/_reduce.js","loc":{"line":1,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/transduce.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_reduce.js"},{"name":"./internal/_xwrap.js","loc":{"line":2,"column":19},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/transduce.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_xwrap.js"},{"name":"./curryN.js","loc":{"line":3,"column":19},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/transduce.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/curryN.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _reduce2 = _interopRequireDefault(require(\"./internal/_reduce.js\"));\n\nvar _xwrap2 = _interopRequireDefault(require(\"./internal/_xwrap.js\"));\n\nvar _curryN = _interopRequireDefault(require(\"./curryN.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      const isOdd = (x) => x % 2 === 1;\n *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\nvar transduce = /*#__PURE__*/(0, _curryN.default)(4, function transduce(xf, fn, acc, list) {\n  return (0, _reduce2.default)(xf(typeof fn === 'function' ? (0, _xwrap2.default)(fn) : fn), acc, list);\n});\nvar _default = transduce;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/transduce.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/transduce.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/transduce.js","original":{"line":3,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/transduce.js","original":{"line":4,"column":0}},{"generated":{"line":63,"column":0},"source":"node_modules/ramda/es/transduce.js","original":{"line":52,"column":0}},{"name":"transduce","generated":{"line":63,"column":4},"source":"node_modules/ramda/es/transduce.js","original":{"line":52,"column":4}},{"generated":{"line":63,"column":13},"source":"node_modules/ramda/es/transduce.js","original":{"line":52,"column":13}},{"generated":{"line":63,"column":16},"source":"node_modules/ramda/es/transduce.js","original":{"line":53,"column":0}},{"generated":{"line":63,"column":29},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":0}},{"generated":{"line":63,"column":50},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":7}},{"generated":{"line":63,"column":51},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":0}},{"generated":{"line":63,"column":53},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":10}},{"name":"transduce","generated":{"line":63,"column":62},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":19}},{"generated":{"line":63,"column":71},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":10}},{"name":"xf","generated":{"line":63,"column":72},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":29}},{"generated":{"line":63,"column":74},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":10}},{"name":"fn","generated":{"line":63,"column":76},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":33}},{"generated":{"line":63,"column":78},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":10}},{"name":"acc","generated":{"line":63,"column":80},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":37}},{"generated":{"line":63,"column":83},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":10}},{"name":"list","generated":{"line":63,"column":85},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":42}},{"generated":{"line":63,"column":89},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":10}},{"generated":{"line":63,"column":91},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":48}},{"generated":{"line":64,"column":0},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":2}},{"generated":{"line":64,"column":9},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":9}},{"name":"xf","generated":{"line":64,"column":31},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":17}},{"generated":{"line":64,"column":33},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":19}},{"generated":{"line":64,"column":34},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":20}},{"name":"fn","generated":{"line":64,"column":41},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":27}},{"generated":{"line":64,"column":43},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":20}},{"generated":{"line":64,"column":48},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":34}},{"generated":{"line":64,"column":58},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":20}},{"generated":{"line":64,"column":61},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":47}},{"name":"fn","generated":{"line":64,"column":82},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":54}},{"generated":{"line":64,"column":84},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":47}},{"generated":{"line":64,"column":85},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":20}},{"name":"fn","generated":{"line":64,"column":88},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":60}},{"generated":{"line":64,"column":90},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":19}},{"generated":{"line":64,"column":91},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":9}},{"name":"acc","generated":{"line":64,"column":93},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":65}},{"generated":{"line":64,"column":96},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":9}},{"name":"list","generated":{"line":64,"column":98},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":70}},{"generated":{"line":64,"column":102},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":9}},{"generated":{"line":64,"column":103},"source":"node_modules/ramda/es/transduce.js","original":{"line":55,"column":2}},{"generated":{"line":65,"column":0},"source":"node_modules/ramda/es/transduce.js","original":{"line":56,"column":1}},{"generated":{"line":65,"column":1},"source":"node_modules/ramda/es/transduce.js","original":{"line":54,"column":0}},{"generated":{"line":65,"column":2},"source":"node_modules/ramda/es/transduce.js","original":{"line":52,"column":0}},{"name":"transduce","generated":{"line":66,"column":15},"source":"node_modules/ramda/es/transduce.js","original":{"line":57,"column":15}}],"sources":{"node_modules/ramda/es/transduce.js":"import _reduce from \"./internal/_reduce.js\";\nimport _xwrap from \"./internal/_xwrap.js\";\nimport curryN from \"./curryN.js\";\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      const isOdd = (x) => x % 2 === 1;\n *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\n\nvar transduce =\n/*#__PURE__*/\ncurryN(4, function transduce(xf, fn, acc, list) {\n  return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\nexport default transduce;"},"lineCount":null}},"error":null,"hash":"ca37e40ab0c236f32fe4b6613541f76a","cacheData":{"env":{}}}