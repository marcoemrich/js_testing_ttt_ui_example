{"id":"node_modules/ramda/es/equals.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602185185963},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602184504771},{"name":"./internal/_curry2.js","loc":{"line":1,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/equals.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_curry2.js"},{"name":"./internal/_equals.js","loc":{"line":2,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/equals.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_equals.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _equals2 = _interopRequireDefault(require(\"./internal/_equals.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      const a = {}; a.v = a;\n *      const b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = /*#__PURE__*/(0, _curry.default)(function equals(a, b) {\n  return (0, _equals2.default)(a, b, [], []);\n});\nvar _default = equals;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/equals.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/equals.js","original":{"line":2,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/equals.js","original":{"line":3,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/ramda/es/equals.js","original":{"line":29,"column":0}},{"name":"equals","generated":{"line":39,"column":4},"source":"node_modules/ramda/es/equals.js","original":{"line":29,"column":4}},{"generated":{"line":39,"column":10},"source":"node_modules/ramda/es/equals.js","original":{"line":29,"column":10}},{"generated":{"line":39,"column":13},"source":"node_modules/ramda/es/equals.js","original":{"line":30,"column":0}},{"generated":{"line":39,"column":26},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":0}},{"generated":{"line":39,"column":46},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":8}},{"name":"equals","generated":{"line":39,"column":55},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":17}},{"generated":{"line":39,"column":61},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":8}},{"name":"a","generated":{"line":39,"column":62},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":24}},{"generated":{"line":39,"column":63},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":8}},{"name":"b","generated":{"line":39,"column":65},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":27}},{"generated":{"line":39,"column":66},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":8}},{"generated":{"line":39,"column":68},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":30}},{"generated":{"line":40,"column":0},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":2}},{"generated":{"line":40,"column":9},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":9}},{"name":"a","generated":{"line":40,"column":31},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":17}},{"generated":{"line":40,"column":32},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":9}},{"name":"b","generated":{"line":40,"column":34},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":20}},{"generated":{"line":40,"column":35},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":9}},{"generated":{"line":40,"column":37},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":23}},{"generated":{"line":40,"column":39},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":9}},{"generated":{"line":40,"column":41},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":27}},{"generated":{"line":40,"column":43},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":9}},{"generated":{"line":40,"column":44},"source":"node_modules/ramda/es/equals.js","original":{"line":32,"column":2}},{"generated":{"line":41,"column":0},"source":"node_modules/ramda/es/equals.js","original":{"line":33,"column":1}},{"generated":{"line":41,"column":1},"source":"node_modules/ramda/es/equals.js","original":{"line":31,"column":0}},{"generated":{"line":41,"column":2},"source":"node_modules/ramda/es/equals.js","original":{"line":29,"column":0}},{"name":"equals","generated":{"line":42,"column":15},"source":"node_modules/ramda/es/equals.js","original":{"line":35,"column":15}}],"sources":{"node_modules/ramda/es/equals.js":"import _curry2 from \"./internal/_curry2.js\";\nimport _equals from \"./internal/_equals.js\";\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      const a = {}; a.v = a;\n *      const b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\n\nvar equals =\n/*#__PURE__*/\n_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n\nexport default equals;"},"lineCount":null}},"error":null,"hash":"cd83c070fcde152b7005ad9b79bcc45b","cacheData":{"env":{}}}