{"id":"node_modules/ramda/es/startsWith.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602185185963},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602184504771},{"name":"./internal/_curry2.js","loc":{"line":1,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/startsWith.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_curry2.js"},{"name":"./equals.js","loc":{"line":2,"column":19},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/startsWith.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/equals.js"},{"name":"./take.js","loc":{"line":3,"column":17},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/startsWith.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/take.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _equals = _interopRequireDefault(require(\"./equals.js\"));\n\nvar _take = _interopRequireDefault(require(\"./take.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Checks if a list starts with the provided sublist.\n *\n * Similarly, checks if a string starts with the provided substring.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> [a] -> Boolean\n * @sig String -> String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @see R.endsWith\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar startsWith = /*#__PURE__*/(0, _curry.default)(function (prefix, list) {\n  return (0, _equals.default)((0, _take.default)(prefix.length, list), prefix);\n});\nvar _default = startsWith;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/startsWith.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/startsWith.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/startsWith.js","original":{"line":3,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/startsWith.js","original":{"line":4,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/ramda/es/startsWith.js","original":{"line":27,"column":0}},{"name":"startsWith","generated":{"line":38,"column":4},"source":"node_modules/ramda/es/startsWith.js","original":{"line":27,"column":4}},{"generated":{"line":38,"column":14},"source":"node_modules/ramda/es/startsWith.js","original":{"line":27,"column":14}},{"generated":{"line":38,"column":17},"source":"node_modules/ramda/es/startsWith.js","original":{"line":28,"column":0}},{"generated":{"line":38,"column":30},"source":"node_modules/ramda/es/startsWith.js","original":{"line":29,"column":0}},{"generated":{"line":38,"column":50},"source":"node_modules/ramda/es/startsWith.js","original":{"line":29,"column":8}},{"name":"prefix","generated":{"line":38,"column":60},"source":"node_modules/ramda/es/startsWith.js","original":{"line":29,"column":18}},{"generated":{"line":38,"column":66},"source":"node_modules/ramda/es/startsWith.js","original":{"line":29,"column":8}},{"name":"list","generated":{"line":38,"column":68},"source":"node_modules/ramda/es/startsWith.js","original":{"line":29,"column":26}},{"generated":{"line":38,"column":72},"source":"node_modules/ramda/es/startsWith.js","original":{"line":29,"column":8}},{"generated":{"line":38,"column":74},"source":"node_modules/ramda/es/startsWith.js","original":{"line":29,"column":32}},{"generated":{"line":39,"column":0},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":2}},{"generated":{"line":39,"column":9},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":9}},{"generated":{"line":39,"column":30},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":16}},{"name":"prefix","generated":{"line":39,"column":49},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":21}},{"generated":{"line":39,"column":55},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":27}},{"name":"length","generated":{"line":39,"column":56},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":28}},{"generated":{"line":39,"column":62},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":16}},{"name":"list","generated":{"line":39,"column":64},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":36}},{"generated":{"line":39,"column":68},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":16}},{"generated":{"line":39,"column":69},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":9}},{"name":"prefix","generated":{"line":39,"column":71},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":43}},{"generated":{"line":39,"column":77},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":9}},{"generated":{"line":39,"column":78},"source":"node_modules/ramda/es/startsWith.js","original":{"line":30,"column":2}},{"generated":{"line":40,"column":0},"source":"node_modules/ramda/es/startsWith.js","original":{"line":31,"column":1}},{"generated":{"line":40,"column":1},"source":"node_modules/ramda/es/startsWith.js","original":{"line":29,"column":0}},{"generated":{"line":40,"column":2},"source":"node_modules/ramda/es/startsWith.js","original":{"line":27,"column":0}},{"name":"startsWith","generated":{"line":41,"column":15},"source":"node_modules/ramda/es/startsWith.js","original":{"line":33,"column":15}}],"sources":{"node_modules/ramda/es/startsWith.js":"import _curry2 from \"./internal/_curry2.js\";\nimport equals from \"./equals.js\";\nimport take from \"./take.js\";\n/**\n * Checks if a list starts with the provided sublist.\n *\n * Similarly, checks if a string starts with the provided substring.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> [a] -> Boolean\n * @sig String -> String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @see R.endsWith\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\n\nvar startsWith =\n/*#__PURE__*/\n_curry2(function (prefix, list) {\n  return equals(take(prefix.length, list), prefix);\n});\n\nexport default startsWith;"},"lineCount":null}},"error":null,"hash":"3384c70b6f9df6f4c043a06be8fb1baa","cacheData":{"env":{}}}