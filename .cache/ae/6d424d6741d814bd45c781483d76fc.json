{"id":"node_modules/ramda/es/prepend.js","dependencies":[{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/package.json","includedInParent":true,"mtime":1602194130739},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/.babelrc","includedInParent":true,"mtime":1602185015623},{"name":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/package.json","includedInParent":true,"mtime":1602189572866},{"name":"./internal/_concat.js","loc":{"line":1,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/prepend.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_concat.js"},{"name":"./internal/_curry2.js","loc":{"line":2,"column":20},"parent":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/prepend.js","resolved":"/home/memrich/sync/work/konferenzen_und_talks/2020/10_fh_salzburg/e2e_workshop/ttt-example/node_modules/ramda/es/internal/_curry2.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _concat2 = _interopRequireDefault(require(\"./internal/_concat.js\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nvar prepend = /*#__PURE__*/(0, _curry.default)(function prepend(el, list) {\n  return (0, _concat2.default)([el], list);\n});\nvar _default = prepend;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/prepend.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/prepend.js","original":{"line":2,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/prepend.js","original":{"line":3,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/prepend.js","original":{"line":21,"column":0}},{"name":"prepend","generated":{"line":31,"column":4},"source":"node_modules/ramda/es/prepend.js","original":{"line":21,"column":4}},{"generated":{"line":31,"column":11},"source":"node_modules/ramda/es/prepend.js","original":{"line":21,"column":11}},{"generated":{"line":31,"column":14},"source":"node_modules/ramda/es/prepend.js","original":{"line":22,"column":0}},{"generated":{"line":31,"column":27},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":0}},{"generated":{"line":31,"column":47},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":8}},{"name":"prepend","generated":{"line":31,"column":56},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":17}},{"generated":{"line":31,"column":63},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":8}},{"name":"el","generated":{"line":31,"column":64},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":25}},{"generated":{"line":31,"column":66},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":8}},{"name":"list","generated":{"line":31,"column":68},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":29}},{"generated":{"line":31,"column":72},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":8}},{"generated":{"line":31,"column":74},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":35}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/prepend.js","original":{"line":24,"column":2}},{"generated":{"line":32,"column":9},"source":"node_modules/ramda/es/prepend.js","original":{"line":24,"column":9}},{"generated":{"line":32,"column":31},"source":"node_modules/ramda/es/prepend.js","original":{"line":24,"column":17}},{"name":"el","generated":{"line":32,"column":32},"source":"node_modules/ramda/es/prepend.js","original":{"line":24,"column":18}},{"generated":{"line":32,"column":34},"source":"node_modules/ramda/es/prepend.js","original":{"line":24,"column":17}},{"generated":{"line":32,"column":35},"source":"node_modules/ramda/es/prepend.js","original":{"line":24,"column":9}},{"name":"list","generated":{"line":32,"column":37},"source":"node_modules/ramda/es/prepend.js","original":{"line":24,"column":23}},{"generated":{"line":32,"column":41},"source":"node_modules/ramda/es/prepend.js","original":{"line":24,"column":9}},{"generated":{"line":32,"column":42},"source":"node_modules/ramda/es/prepend.js","original":{"line":24,"column":2}},{"generated":{"line":33,"column":0},"source":"node_modules/ramda/es/prepend.js","original":{"line":25,"column":1}},{"generated":{"line":33,"column":1},"source":"node_modules/ramda/es/prepend.js","original":{"line":23,"column":0}},{"generated":{"line":33,"column":2},"source":"node_modules/ramda/es/prepend.js","original":{"line":21,"column":0}},{"name":"prepend","generated":{"line":34,"column":15},"source":"node_modules/ramda/es/prepend.js","original":{"line":27,"column":15}}],"sources":{"node_modules/ramda/es/prepend.js":"import _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\n\nvar prepend =\n/*#__PURE__*/\n_curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\n\nexport default prepend;"},"lineCount":null}},"error":null,"hash":"815e5a0570382b7bf90e8f27fb090d9a","cacheData":{"env":{}}}