{"mappings":"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","sources":["src/index.js","src/components/Game.jsx","src/domain/Board.js","src/domain/Player.js","src/components/Board.jsx","src/components/Cell.jsx","src/components/Player.jsx","src/components/MessageBox.jsx"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Game } from \"./components/Game\";\n\nconst App = document.getElementById(\"app\");\n\nReactDOM.render(<Game />, App);\n","import React from \"react\";\nimport * as BoardModel from \"../domain/Board\";\nimport { Player as PlayerModel } from \"../domain/Player\";\nimport { Board } from \"./Board\";\nimport { positionToString } from \"./Cell\";\nimport { Player } from \"./Player\";\nimport { MessageBox } from \"./MessageBox\";\n\nexport const Game = () => {\n  const [board, setBoard] = React.useState(BoardModel.create());\n  const [currentPlayer, setCurrentPlayer] = React.useState(PlayerModel.X);\n  const [names, setNames] = React.useState({ X: \"Bob\", O: \"Alice\" });\n  const [messages, setMessages] = React.useState([]);\n\n  const winner = () => BoardModel.winner(board);\n\n  const clickAtCell = (pos) => {\n    setMessages(\n      messages.concat([\n        names[currentPlayer] + \" sets \" + currentPlayer + \" on \" + positionToString(pos),\n      ])\n    );\n    setBoard(BoardModel.mark(currentPlayer, pos, board));\n    setCurrentPlayer(PlayerModel.opponent(currentPlayer));\n  };\n\n  return winner() ? (\n    <h1 data-testid=\"win-message\">\n      {names[winner()]} wins the game with {winner()}\n    </h1>\n  ) : (\n    <>\n      <Player\n        label=\"Player X\"\n        name={names.X}\n        onChange={(e) => setNames({ ...names, X: e.target.value })}\n      />\n      <br />\n      <Player\n        label=\"Player O\"\n        name={names.O}\n        onChange={(e) => setNames({ ...names, O: e.target.value })}\n      />\n      <br />\n      <Board board={board} clickAtCell={clickAtCell} />\n      <br />\n      <MessageBox messages={messages} />\n    </>\n  );\n};\n","const cols = [0, 1, 2];\nconst rows = cols;\nconst rowsOrCols = cols;\nconst posToString = (pos) => `${pos.x}/${pos.y}`;\nconst winnerOfTwoCells = (symbol1, symbol2) => (symbol1 === symbol2 ? symbol1 : undefined);\n\nconst or = (a, b) => a || b;\n\nexport const create = () => ({});\nexport const mark = (player, pos, board) => ({ ...board, [posToString(pos)]: player });\nexport const at = (pos, board) => board[posToString(pos)];\n\nconst winByDiag1 = (board) =>\n  rows.map((xy) => at({ x: xy, y: xy }, board)).reduce(winnerOfTwoCells);\n\nconst winByDiag2 = (board) =>\n  rows.map((xy) => at({ x: 2 - xy, y: xy }, board)).reduce(winnerOfTwoCells);\n\nconst winByRowY = (y, board) => cols.map((x) => at({ x, y }, board)).reduce(winnerOfTwoCells);\n\nconst winByColX = (x, board) => rows.map((y) => at({ x, y }, board)).reduce(winnerOfTwoCells);\n\nconst winByRow = (board) => winByRowOrCol(winByRowY, board);\nconst winByCol = (board) => winByRowOrCol(winByColX, board);\nconst winByRowOrCol = (winByRowOrColXY, board) =>\n  rowsOrCols.map((xOrY) => winByRowOrColXY(xOrY, board)).reduce(or);\n\nexport const winner = (board) =>\n  [winByRow, winByCol, winByDiag1, winByDiag2]\n    .map((winCondition) => winCondition(board))\n    .reduce(or);\n\nexport const positions = () => [\n  { x: 0, y: 0 },\n  { x: 1, y: 0 },\n  { x: 2, y: 0 },\n  { x: 0, y: 1 },\n  { x: 1, y: 1 },\n  { x: 2, y: 1 },\n  { x: 0, y: 2 },\n  { x: 1, y: 2 },\n  { x: 2, y: 2 },\n];\n","export const Player = {\n  X: \"X\",\n  O: \"O\",\n  opponent: (player) => (player === Player.O ? Player.X : Player.O),\n};\n","import React from \"react\";\nimport * as BoardModel from \"../domain/Board\";\nimport { Cell, positionToString } from \"./Cell\";\n\nexport const positionfromString = (str) => ({\n  x: str.split(\"|\")[0],\n  y: str.split(\"|\")[1],\n});\n\nexport const Board = ({ board, clickAtCell }) => (\n  <div className=\"board\" data-testid=\"board\">\n    {BoardModel.positions().map((pos) => (\n      <Cell\n        key={positionToString(pos)}\n        position={pos}\n        owner={BoardModel.at(pos, board)}\n        onClick={(pos) => clickAtCell(pos)}\n      />\n    ))}\n  </div>\n);\n","import React from \"react\";\n\nexport const positionToString = (pos) => `${pos.x}|${pos.y}`;\n\n// Presentational Components\nexport const Cell = ({ owner = \"\", position, onClick }) => (\n  <button\n    role=\"cell\"\n    className={`cell cell_${positionToString(position)}`}\n    data-position={positionToString(position)}\n    onClick={(e) => onClick(position)}\n    data-testid={`cell_${positionToString(position)}`}\n  >\n    {owner}\n  </button>\n);\n","import React from \"react\";\n\nexport const Player = ({ label, name, onChange }) => (\n  <div>\n    <b>{label}</b>:{\" \"}\n    <input value={name.toUpperCase()} onChange={onChange} data-testid=\"player\"></input>\n  </div>\n);\n","import React from \"react\";\n\nexport const MessageBox = ({ messages = [] }) => (\n  <ul id=\"message-box\">\n    {messages.map((m, i) => (\n      <li key={i}>{m}</li>\n    ))}\n  </ul>\n);\n"],"names":[],"version":3,"file":"index.js.map"}